--GROUP BY GROUPING SET
SELECT EmployeeID, StudentID, SUM(Ratings) AS EmployeeRating
FROM Howard.EmployeePerformance
GROUP BY
GROUPING SETS(EmployeeID, StudentID, ());

SELECT CourseID, StudentID, AVG(Score)
AS CourseAverage
FROM Howard.Courses
GROUP BY
GROUPING SETS(CourseID, StudentID, ());

SELECT UsherID, MemberID, AVG(Tithe) AS AverageTithe
FROM DeeperLifeDC.Collections
GROUP BY
GROUPING SETS (UsherID, MemberID, ());

--ROLLUP
SELECT Location, WorkTeam, COUNT(MemberID) AS Members
FROM DeeperLifeDMV.Members
GROUP BY ROLLUP(Location, WorkTeam)
ORDER BY Location, Workteam;

SELECT City, SchoolDistrict, COUNT(StudentID) AS TotalStudents
FROM DCDMV.Schools
GROUP BY ROLLUP(City, SchoolDistrict)
ORDER BY City, SchoolDistrict;

SELECT City, PoliceDistrict, COUNT(EmployeeID) AS TotalEmployees
FROM Maryland.Police
GROUP BY ROLLUP(City, PoliceDistrict)
ORDER BY City, PoliceDistrict;

--CUBE
SELECT EmployeeID, StudentID, SUM(Ratings) AS EmployeeRating
FROM Howard.EmployeePerformance
GROUP BY CUBE(EmployeeID, StudentID)
ORDER BY EmployeeID, StudentID;

SELECT CourseID, StudentID, AVG(Score)
AS CourseAverage
FROM Howard.Courses
GROUP BY CUBE(CourseID, StudentID)
ORDER BY CourseID, StudentID;

SELECT UsherID, MemberID, AVG(Tithe) AS AverageTithe
FROM DeeperLifeDC.Collections
GROUP BY CUBE(UsherID, MemberID)
ORDER BY UsherID, MemberID;

-- PIVOTING DATA

SELECT OrderID, MenSuit, LadiesSuit, BoysSuit
FROM
(SELECT OrderID, Category, OrderQuantity FROM
FabriqueCategory) AS CustomerOrder
PIVOT(SUM(OrderQuantity) FOR Category IN ([MenSuit], [LadiesSuit], [BoysSuit])) AS pvt;

-- UNPIVOTING DATA

SELECT OrderID, Category, OrderQuantity FROM
(SELECT OrderID, 'MenSuit', 'LadiesSuit', 'BoysSuit' FROM FabriqueCategoryDetails) AS pvt
UNPIVOT(OrderQuantity FOR Category IN (['MenSuit'], ['LadiesSuit'], ['BoysSuit'])) AS uppvt;

--3. CREATE CREATE A TABLE WITH IDENTITY COLUMN

CREATE TABLE DeeperLifeDCMembers(ID TINYINT IDENTITY(1,1) NOT NULL, FirstName VARCHAR(20), LatestAttendance Datetime NOT NULL DEFAULT GETDATE());

--POPULATE 20 ROWS
INSERT INTO DeeperLifeDCMembers VALUES('Michael', DEFAULT);
INSERT INTO DeeperLifeDCMembers VALUES('Charles', DEFAULT);
INSERT INTO DeeperLifeDCMembers VALUES('Christopher', DEFAULT);
INSERT INTO DeeperLifeDCMembers VALUES('Christian', DEFAULT);
INSERT INTO DeeperLifeDCMembers VALUES('Nkechi', DEFAULT);
INSERT INTO DeeperLifeDCMembers VALUES('Chucks', DEFAULT);
INSERT INTO DeeperLifeDCMembers VALUES('Kayode', DEFAULT);
INSERT INTO DeeperLifeDCMembers VALUES('Lola', DEFAULT);
INSERT INTO DeeperLifeDCMembers VALUES('Honour', DEFAULT);
INSERT INTO DeeperLifeDCMembers VALUES('Glory', DEFAULT);
INSERT INTO DeeperLifeDCMembers VALUES('Caleb', DEFAULT);
INSERT INTO DeeperLifeDCMembers VALUES('Joshua', DEFAULT);
INSERT INTO DeeperLifeDCMembers VALUES('Deborah', DEFAULT);
INSERT INTO DeeperLifeDCMembers VALUES('Conqueror', DEFAULT);
INSERT INTO DeeperLifeDCMembers VALUES('Faith', DEFAULT);
INSERT INTO DeeperLifeDCMembers VALUES('Francis', DEFAULT);
INSERT INTO DeeperLifeDCMembers VALUES('Caleb', DEFAULT);
INSERT INTO DeeperLifeDCMembers VALUES('Faithful', DEFAULT);
INSERT INTO DeeperLifeDCMembers VALUES('Wumi', DEFAULT);
INSERT INTO DeeperLifeDCMembers VALUES('Favour', DEFAULT);

--4. CREATE A TABLE AS AN EXACT COPY OF ANOTHER TABLE

SELECT INTO DeeperLifeDCMembers3 FROM DeeperLifeDCMembers;

--UPDATE 5 ROWS
UPDATE DeeperLifeDCMembers3 SET FirstName = 'Lawrence'
WHERE ID = 1;
UPDATE DeeperLifeDCMembers3 SET FirstName = 'Amakachi'
WHERE ID = 2;
UPDATE DeeperLifeDCMembers3 SET FirstName = 'Kayode'
WHERE ID = 3;
UPDATE DeeperLifeDCMembers3 SET FirstName = 'Oluwaseyi'
WHERE ID = 4;
UPDATE DeeperLifeDCMembers3 SET FirstName = 'Meredith'
WHERE ID = 5;

-- DELETE 5 ROWS
DELETE FROM DeeperLifeDCMembers3
WHERE FirstName IN ('CHARLES', 'Christian', 'Michael', 'Favour', 'Wumi');

--USE THE DUPLICATED TABLE AND CREATE A MERGE STATEMENT TO SEE IF ANY ROW HAS CHANGED

MERGE DeeperLifeDCMembers TARGET 
USING DeeperLifeDCMembers3 SOURCE
ON (TARGET.ID = SOURCE.ID)
WHEN MATCHED 
THEN UPDATE SET
	TARGET.FirstName = SOURCE.FirstName, TARGET.LatestAttendance = SOURCE.LatestAttendance
WHEN NOT MATCHED BY TARGET
THEN INSERT (FirstName, LatestAttendance) 
VALUES(SOURCE.FirstName, SOURCE.LatestAttendance)
WHEN NOT MATCHED BY SOURCE
    THEN DELETE;
